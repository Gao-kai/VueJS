{"version":3,"file":"vue.js","sources":["../../src/observer/index.js","../../src/observer/proxy.js","../../src/init/initData.js","../../src/init/initState.js","../../src/template-compiler/tagReg.js","../../src/template-compiler/htmlParser.js","../../src/template-compiler/codeGenerator.js","../../src/template-compiler/index.js","../../src/init/init.js","../../src/index.js"],"sourcesContent":["// 传递过来的是data引用空间\r\nexport function observe(data) {\r\n\t// 只有对象才可以劫持 如果不是对象 那么不用劫持\r\n\tif (typeof data !== 'object' || data === null) return;\r\n\r\n\t// 如果一个对象的__ob__属性存在并且是Observer的实例 那么说明这个对象已经被观测过了\r\n\tif (data.__ob__ instanceof Observer) {\r\n\t\treturn data.__ob__;\r\n\t}\r\n\t// new Observer(data)函数调用的过程就是劫持data对象上属性的过程\r\n\treturn new Observer(data);\r\n}\r\n\r\n// 观测数组和对象的类\r\nclass Observer {\r\n\tconstructor(data) {\r\n\t\t// 让__ob__属性的可被遍历属性设置为false 避免被遍历到从而引起死循环\r\n\t\tObject.defineProperty(data, '__ob__', {\r\n\t\t\tvalue: this,\r\n\t\t\tenumrable: false,\r\n\t\t\tconfigurable: false\r\n\t\t})\r\n\r\n\t\tif (Array.isArray(data)) {\r\n\t\t\t// 会将数组的7个可修改自身的方法调用进行劫持\r\n\t\t\tlet newArrayProto = createNewArrayProto();\r\n\t\t\tdata.__proto__ = newArrayProto;\r\n\t\t\t\r\n\t\t\t// 会将数组中的对象的属性进行劫持\r\n\t\t\tthis.observeArray(data);\r\n\t\t} else {\r\n\t\t\tthis.walk(data);\r\n\t\t}\r\n\t}\r\n\r\n\t// 遍历对象 对属性依次进行劫持\r\n\twalk(data) {\r\n\t\tObject.keys(data).forEach(key => {\r\n\t\t\t// 单独定义  公共 方便导出 不放在类上 \r\n\t\t\tdefineReactive(data, key, data[key]);\r\n\t\t})\r\n\t}\r\n\r\n\t// 对数组中每一项进行观测\r\n\tobserveArray(data) {\r\n\t\tdata.forEach(item => {\r\n\t\t\tobserve(item);\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * 把对象target上的所有属性重新定义成为响应式数据\r\n * 为什么不放在类Observer上，为的是将这个方法可以单独导出在其他地方使用\r\n */\r\nfunction defineReactive(target, key, value) {\r\n\t// 递归劫持 如果对象的属性值还是一个对象\r\n\tobserve(value);\r\n\t\r\n\tObject.defineProperty(target, key, {\r\n\t\t// 拦截取值操作\r\n\t\tget() {\r\n\t\t\tconsole.log('拦截取值操作', key, value);\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\t// 拦截赋值操作\r\n\t\tset(newValue) {\r\n\t\t\tconsole.log('拦截存值操作', key, value);\r\n\t\t\tif (newValue === value) return;\r\n\r\n\t\t\t// 如果新赋的值是一个新的对象 还需要递归劫持\r\n\t\t\tobserve(newValue);\r\n\t\t\tvalue = newValue;\r\n\t\t\t\r\n\t\t}\r\n\t})\r\n}\r\n\r\n\r\nfunction createNewArrayProto() {\r\n\tlet oldArrayProto = Array.prototype;\r\n\t// 创建一个原型指向数组原型的空对象\r\n\tlet newArrayProto = Object.create(oldArrayProto);\r\n\r\n\t// 以下7个方法会改变原数组\r\n\tlet methods = [\r\n\t\t'push',\r\n\t\t'pop',\r\n\t\t'shift',\r\n\t\t'unshift',\r\n\t\t'sort',\r\n\t\t'reverse',\r\n\t\t'splice'\r\n\t]\r\n\r\n\tmethods.forEach(method => {\r\n\t\tnewArrayProto[method] = function(...args) {\r\n\t\t\t// console.log('监听到调用了数组方法', method);\r\n\t\t\tlet result = oldArrayProto[method].call(this, ...args);\r\n\r\n\t\t\t// 需要对操作数组方法的时候新增的数据 再次进行劫持\r\n\t\t\tlet inserted;\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'push':\r\n\t\t\t\tcase 'unshift':\r\n\t\t\t\t\tinserted = args;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'splice':\r\n\t\t\t\t\tinserted = args.slice(2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// console.log('inserted', inserted);\r\n\r\n\t\t\tif (inserted) {\r\n\t\t\t\t// 对新增的内容再次进行劫持\r\n\t\t\t\tthis.__ob__.observeArray(inserted);\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\t})\r\n\r\n\treturn newArrayProto;\r\n}\r\n","/**\r\n * @param {Object} vm Vue实例对象\r\n * @param {Object} target 要代理的vm上的目标对象_data = {}\r\n * @param {Object} key 目标对象的属性 name\r\n * 实现访问vm.name = 访问vm._data.name\r\n */\r\n export function proxy(vm, target, key) {\r\n\tObject.defineProperty(vm, key, {\r\n\t\tget() {\r\n\t\t\treturn vm[target][key];\r\n\t\t},\r\n\t\tset(newValue) {\r\n\t\t\tvm[target][key] = newValue;\r\n\t\t}\r\n\t})\r\n}","import {observe} from '../observer/index.js'\r\nimport {proxy} from '../observer/proxy.js'\r\n\r\n/**\r\n * 1. 获取数据\r\n * 2. 对获取到的data进行响应式处理\r\n */\r\nexport function initData(vm) {\r\n\r\n\tlet data = vm.$options.data;\r\n\t// data可能是函数可能是对象\r\n\tdata = typeof data === 'function' ? data.call(vm) : data;\r\n\r\n\t// 将要劫持的对象放在实例上 便于观测效果\r\n\tvm._data = data;\r\n\t\r\n\t// 对data数据进行响应式处理\r\n\tobserve(data);\r\n\r\n\t// 数据代理\r\n\tfor (let key in data) {\r\n\t\tproxy(vm, '_data', key);\r\n\t}\r\n\r\n}","import {initData} from './initData.js'\r\n\r\nexport function initState(vm) {\r\n\tlet options = vm.$options; // 获取用户传入的选项\r\n\t\r\n\t// 初始化的顺序应该是固定的\r\n\t\r\n\tif (options.props) {\r\n\t\tinitProps(vm);\r\n\t}\r\n\r\n\tif (options.data) {\r\n\t\tinitData(vm);\r\n\t}\r\n\r\n\tif (options.methods) {\r\n\t\t// initMethods(vm);\r\n\t}\r\n\r\n\tif (options.computed) {\r\n\t\tinitComputed(vm);\r\n\t}\r\n\r\n\tif (options.watch) {\r\n\t\tinitWatch(vm);\r\n\t}\r\n}\r\n","/* \r\n    由于Vue2.0中的HTML模板解析是基于正则表达式来实现的，\r\n    所以这个模块专门用来存放所有模板解析过程中遇到的正则表达式。\r\n    从Vue3.0开始摒弃了正则表达式解析模板的方法，而是采用了字符逐个判断的方法来实现的。\r\n\r\n    对于任意正则表达式，只有两个功能：\r\n    1. 对一段字符串进行匹配校验，看这个字符串是否符合正则，返回的是布尔值\r\n    2. 找出一段字符串中符合正则校验的内容，也就是正则捕获\r\n\r\n    这里面的大多数正则就是为了捕获模板字符串中的开始标签、结束标签、标签属性以及双大括号内部的表达式的。\r\n\r\n*/\r\n\r\n/**\r\n * 1. ncname\r\n * ncname只是一个字符串，要将字符串转化为正则还需要使用new RegExp进行转换，字符串中的/必须用//表示\r\n *\r\n * 用于专门匹配标签名称的正则，注意不是标签全部而是标签名称\r\n * 比如标准标签：div,h1,p,span等\r\n * 还有自定义标签：table-el,cmdb-tree,hello.tree\r\n *\r\n * 1. 第一位必须以英文字母和下划线\r\n * 2. 开头后面可能有可能没有，比如b标签这种单字母标签\r\n * 3. 如果有那么可以是以数字、字母、下划线、中横线-和点.\r\n */\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9a-zA-Z_]*`;\r\n\r\n/**\r\n * 2. qnameCapture：捕获开始标签和结束标签名称\r\n *\r\n * qnameCapture是一个字符串，用在正则中便具有了可以捕获的作用，因为其内部有小括号\r\n * 专门用来从一串html字符串中捕获匹配到的标签名称分组内容的\r\n * 这里还考虑到了命名空间的标签比如：<div:hello>\r\n * 对于这样一个标签<div:hello></div:hello> 这个正则可以捕获到div:hello这个名称\r\n * 对于这样一个标签<div></div> 这个正则可以捕获到div这个标签名称\r\n */\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\r\n\r\n/**\r\n * 3. startTagOpen：可以匹配到字符串中的开始标签如<div，目的是捕获到开始标签名称div\r\n *\r\n * 比如字符串<div></div> 会匹配到<div,分组会捕获到字符串div,这个div就是组成AST抽象语法树的tag属性。\r\n *\r\n * 解析正则：\r\n * 1. 标签必须以<开头\r\n * 2. 标签名称不可以以数字开头，必须以数字字母瞎下划线开头\r\n * 3. 标签名称除了首字母之外，还可以是数字、字母、下划线、中横线-和点.\r\n *    比如自定义标签<_div> <table-el> <div.demo>\r\n * 4. HTML标签有两种，常见的比如<div>，还有不常见的带有命名空间的标签比如：<div:hello>\r\n *    在web component中定义的自定义标签会出现这种情况\r\n *\r\n */\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);\r\n\r\n/**\r\n * 4. endTag: 专门用来匹配html结束标签的正则，在匹配成功会捕获到结束标签的名称\r\n * 和开始标签一样，对于</div>这种普通标签，会匹配到</div>，捕获到div\r\n * 对于<br/>和<hr/>这种自己闭合的标签，会匹配为空，因为会被当做开始标签解析\r\n */\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);\r\n\r\n/**\r\n * 5. startTagClose： 专门用来匹配开始标签闭合的正则\r\n * 比如可以匹配成功 结束标签<div>，会匹配到>符号\r\n * 比如可以匹配成功 自闭合标签<br/>，会匹配到/>符号\r\n *\r\n *\r\n * \\s* 可以有0个或多个空白字符开头\r\n * (\\/?)>  匹配 />\r\n */\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n\r\n/**\r\n * 6. attribute：专门用来匹配和捕获标签内的属性键值对的正则\r\n *     由于此正则存在多个分组，但是最终我们需要的是：\r\n * 第一个分组$1，存放的是属性的key\r\n * 第三、四、五分组，分别存放的是属性的值\r\n *\r\n * 1. ^\\s* 可以以空白字符开始\r\n *\r\n * 2. ([^\\s\"'<>\\/=]+) 后续不能存在这些特殊字符 可以是除了这些字符的一个或多个字符组成的属性key\r\n *\r\n * 3. (?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?\r\n *      ?: 整体分组是只匹配不捕获的\r\n *      ?  整体可以出现一次或多次\r\n *\r\n *  3.1  \\s*(=)\\s* 键值对以=号连接，前面左右两边可以有空白字符，比如: name =   job\r\n *  3.2  () ?:整体分组是只匹配不捕获的\r\n *      \"([^\"]*)\"+ 左右边都是双引号，中间不是双引号的就可以匹配，比如color=\"red\"\r\n *      |代表或者的意思\r\n *      '([^']*)'+ 左右边都是单引号，中间不是单引号的就可以匹配，比如fontSize='18px'\r\n *      |代表或者的意思\r\n *      ([^\\s\"'=<>`]+) 只要不是空白字符 \" ' = < > `，其余的任意字符组成的一个或多个单词都可以匹配，比如data-src=demo\r\n *  3.3 还可以只有属性名没有属性值，比如<input disabled>这种也符合html语法\r\n */\r\nconst attribute =\r\n  /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\n\r\n/**\r\n * 7. defaultTagReg ： 用来匹配双大括号语法的正则，可以捕获到内部的表达式，全局匹配\r\n *\r\n * ((?:.|\\r?\\n)+?)\r\n * 最后的?更在量词元字符后面，代表取消正则捕获的贪婪性，只捕获最短的符合条件的字符即可\r\n * (?:.|\\r?\\n)+\r\n * 开头的?:表示对该小分组只匹配不捕获\r\n * .表示除了\\n换行符之外的任意字符\r\n * 或者\r\n * \\r?\\n 0个或一个回车符号后面跟这个换行符\r\n *\r\n * {{any char}} 表示可以匹配任意双大括号语法，并且会捕获到里面的表达式\r\n *\r\n */\r\nconst defaultTagReg = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n\r\n\r\nexport {\r\n    startTagOpen,\r\n    startTagClose,\r\n    endTag,\r\n    attribute,\r\n    defaultTagReg\r\n}","import { startTagOpen, startTagClose, endTag, attribute } from \"./tagReg.js\";\r\n\r\n/**\r\n * parseHTML方法 htmlparser2等于手写了\r\n *\r\n *\r\n * 1. 功能：将html语法表达的html模板字符串转化为JS语法表达的AST抽象语法树\r\n *\r\n * 2. 解析思路：\r\n * 不停基于正则对htmlStr进行解析，每次匹配到一部分内容就从原始htmlStr中将其删除\r\n * 最终等到htmlStr截取为空字符串的时候，标志着模板解析完成。\r\n * 在解析的过程中会逐渐将AST抽象语法树构建起来。\r\n */\r\n\r\nconst ELEMENT_TYPE = 1;\r\nconst TEXT_TYPE = 3;\r\n\r\nexport function parseHTML(htmlStr) {\r\n  let root;\r\n  let tagStack = [];\r\n  let currentParent = null;\r\n\r\n  const onParseStartTag = function (tagName, attrs) {\r\n    const astNode = createASTElement(tagName, attrs);\r\n    if (!root) {\r\n      root = astNode;\r\n    }\r\n\r\n    // 如果指向栈顶指针有节点 要将当前解析后新建的astNode当做子节点加入到当前节点的children中\r\n    if (currentParent) {\r\n      // astNode的父节点引用指向栈顶\r\n      astNode.parent = currentParent;\r\n      // 父节点将astNode加入子节点数组中 是双向奔赴的行为\r\n      currentParent.children.push(astNode);\r\n    }\r\n\r\n    tagStack.push(astNode);\r\n    currentParent = astNode;\r\n  };\r\n\r\n  const onParseText = function (text) {\r\n    text = text.replace(/\\s/g, \"\");\r\n    // 父节点将文本节点加入子节点数组中\r\n    text &&\r\n      currentParent.children.push({\r\n        text,\r\n        nodeType: TEXT_TYPE,\r\n        parent: currentParent,\r\n      });\r\n  };\r\n\r\n  const onParseEndTag = function (tagName) {\r\n    let topNodeElement = tagStack.pop();\r\n    if (topNodeElement.tag !== tagName) {\r\n      console.error(\"输入的标签不合法!\");\r\n    }\r\n    currentParent = tagStack[tagStack.length - 1];\r\n  };\r\n\r\n  /**\r\n   * 将htmlStr字符串从索引为startIndex的地方截取至末尾，并给原始htmlStr字符串赋值\r\n   */\r\n  const advance = function (startIndex) {\r\n    htmlStr = htmlStr.slice(startIndex);\r\n  };\r\n\r\n  /**\r\n   *  解析开始标签，要求解析的产物是开始标签的名称tagName和开始标签的属性attrs数组\r\n   */\r\n  const parseStartTag = function () {\r\n    const startTagOpenMatchResult = htmlStr.match(startTagOpen);\r\n    if (startTagOpenMatchResult) {\r\n      // console.log(\"startTagOpenMatchResult\", startTagOpenMatchResult);\r\n\r\n      // 解析的产物\r\n      const parseResult = {\r\n        tagName: startTagOpenMatchResult[1],\r\n        attrs: [],\r\n      };\r\n      advance(startTagOpenMatchResult[0].length);\r\n\r\n      // 解析开始标签中的属性和末尾的右尖角号,只要没有遇到结束的右尖角号就一直解析属性\r\n      let attrMatchResult;\r\n      let startTagCloseMatchResult;\r\n      while (\r\n        !(startTagCloseMatchResult = htmlStr.match(startTagClose)) &&\r\n        (attrMatchResult = htmlStr.match(attribute))\r\n      ) {\r\n        // console.log(\"attrMatchResult\", attrMatchResult);\r\n        advance(attrMatchResult[0].length);\r\n        parseResult.attrs.push({\r\n          name: attrMatchResult[1],\r\n          value:\r\n            attrMatchResult[3] ||\r\n            attrMatchResult[4] ||\r\n            attrMatchResult[5] ||\r\n            true,\r\n        });\r\n      }\r\n\r\n      if (startTagCloseMatchResult) {\r\n        advance(startTagCloseMatchResult[0].length);\r\n      }\r\n      return parseResult;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const createASTElement = function (tag, attrs) {\r\n    return {\r\n      tag,\r\n      attrs,\r\n      nodeType: ELEMENT_TYPE,\r\n      parent: null,\r\n      children: [],\r\n    };\r\n  };\r\n\r\n  while (htmlStr !== \"\") {\r\n    let textEndIndex = htmlStr.indexOf(\"<\");\r\n\r\n    // 开始标签<div> 或者 结束标签</div>\r\n    if (textEndIndex === 0) {\r\n      let startTagParseResult = parseStartTag();\r\n      //  说明当前htmlStr的开头第一个字符是开始标签的<\r\n      if (startTagParseResult) {\r\n        let { tagName, attrs } = startTagParseResult;\r\n        onParseStartTag(tagName, attrs);\r\n        continue;\r\n      }\r\n\r\n      let endTagParseResult = htmlStr.match(endTag);\r\n      //  说明当前htmlStr的开头第一个字符是结束标签的<\r\n      if (endTagParseResult) {\r\n        advance(endTagParseResult[0].length);\r\n        onParseEndTag(endTagParseResult[1]);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // 说明textEndIndex就是标签内部文本结束位置\r\n    if (textEndIndex > 0) {\r\n      const text = htmlStr.slice(0, textEndIndex);\r\n      if (text) {\r\n        onParseText(text);\r\n        advance(text.length);\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(\"当前模板字符串 ====>\\n\", htmlStr === \"\"); // true 说明解析完成\r\n\r\n  // console.log(\"解析模板的产物AST语法树是 === >\\n\", root);\r\n\r\n  return root;\r\n}\r\n\r\n/* \r\n    总体解析思路：\r\n\r\n    入口：从<字符的 indexOf返回值开始解析\r\n        =0  解析到了一个开始标签<div>或者结束标签</div>\r\n        >0 \r\n\r\n    不能光删 需要边删除边构建AST抽象语法树\r\n    root:{\r\n        tag:\"div\",\r\n        arrts:[],\r\n        children:[\r\n            {\r\n                tag:\"p\",\r\n                arrts:[],\r\n                children：\"你好啊，李银河！\"\r\n                parent:div\r\n            }，\r\n             {\r\n                tag:\"div\",\r\n                arrts:[],\r\n                children：[\r\n                    {\r\n                        tag:\"span\",\r\n                        arrts:[],\r\n                        children：\"span标签\"\r\n                        parent:div\r\n                    }\r\n                ]\r\n                parent:div\r\n            }\r\n        ],\r\n        parent:null\r\n    }\r\n*/\r\n\r\n/* \r\n    父子关系的确定 基于栈 这是栈的应用\r\n\r\n    当前解析的标签tagName的父亲就是栈顶元素的儿子\r\n    遇到结束标签就出栈\r\n    遇到开始标签就入栈，确定父子关系\r\n\r\n    基于正则和while循环进行解析\r\n    基于栈维护关系\r\n    进栈就构建父子关系\r\n    出栈就维护栈顶指针\r\n    出来AST抽象语法树\r\n*/\r\n","import { defaultTagReg } from \"./tagReg.js\";\r\n\r\n\r\n/**\r\n *  generatorProps：专门用于生成属性字符串的方法\r\n *  输入节点的attrs，返回一个拼接好的属性值组成的字符串\r\n *  比如输入如下attrs属性数组：\r\n *  [\r\n *      {name: 'id', value: 'app'}, \r\n *      {name: 'style', value: 'color: pink;font-size: 18px;'}\r\n *  ];\r\n *  \r\n *  返回一个拼接后的propsStr字符串：\r\n *  {id:\"app\",style:{\"color\":\"pink\",\"font-size\":\"18px\"}}\r\n * \r\n */\r\nfunction generatorProps(attrs){\r\n    let propsStr = \"\";\r\n    for (const attr of attrs) {\r\n        let {name,value} = attr;\r\n        if(name === 'style'){\r\n            let styleObj = {};\r\n\r\n            // 把诸如 value: 'color: pink;font-size: 18px;'中最后一个;切割掉 便于后续拆分字符串为数组\r\n            if(value[value.length-1] === \";\"){\r\n                value = value.slice(0,-1);\r\n            }\r\n\r\n            // 继续拆分\r\n            value.split(\";\").forEach(item=>{\r\n                let [k,v] = item.split(\":\");\r\n                styleObj[k.trim()] = v.trim();\r\n            })\r\n            console.log('styleObj',styleObj)\r\n            value = styleObj;\r\n        }\r\n        propsStr += `${name}:${JSON.stringify(value)},`;\r\n    }\r\n\r\n    console.log(\"拼接的属性字符串为：\",propsStr.slice(0,-1))\r\n    return `{${propsStr.slice(0,-1)}}`\r\n}\r\n\r\n\r\nfunction generatorChildren(children){\r\n    if(children.length > 0){\r\n        return children.map(astNode=>generatorChild(astNode)).join(\",\");\r\n    }\r\n}\r\n\r\nfunction generatorChild(astNode){\r\n    const ELEMENT_TYPE = 1;\r\n    const TEXT_TYPE = 3;\r\n\r\n    if(astNode.nodeType === ELEMENT_TYPE){\r\n        return codeGenerator(astNode);\r\n    }\r\n\r\n    if(astNode.nodeType === TEXT_TYPE){\r\n        let content = astNode.text;\r\n        if(!defaultTagReg.test(content)){\r\n            return `_v(${JSON.stringify(content)})`;\r\n        }else{\r\n            // {{name}} hahah\r\n            // xixi {{name}} hahah {{age}} wuwu\r\n            let tokens = [];\r\n            let defaultTagMatchRes;\r\n            let lastIndex = 0;\r\n\r\n            defaultTagReg.lastIndex = 0; // 消除全局g正则捕获的懒惰性,避免由于test的判断导致lastIndex发生偏移\r\n\r\n            while(defaultTagMatchRes = defaultTagReg.exec(content)){\r\n                // 获取匹配双大括号的开始索引\r\n                let matchStartIndex = defaultTagMatchRes.index;\r\n\r\n                // 说明双大括号前还有文本，那么要将这段文本截取到tokens中用于未来拼接，比如xixi、hahah\r\n                if(matchStartIndex - lastIndex > 0){\r\n                    tokens.push(JSON.stringify(content.slice(lastIndex,matchStartIndex)));\r\n                }\r\n\r\n                // 获取捕获结果也就是双大括号中的表达式，需要去除空格之后用_s包裹 name age\r\n                let token = defaultTagMatchRes[1];\r\n                tokens.push(`_s(${token.trim()})`);\r\n\r\n                // 手动修正lastIndex的位置，便于下一次截取非{{}}的字符 \r\n                lastIndex = matchStartIndex + defaultTagMatchRes[0].length;\r\n            }\r\n\r\n            // 说明还有文本没有处理完\r\n            if(lastIndex < content.length){\r\n                tokens.push(`${JSON.stringify(content.slice(lastIndex))}`);\r\n            }\r\n\r\n            return `_v(${tokens.join(\"+\")})`;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function codeGenerator(astTree) {\r\n    console.log(\"输入的是AST抽象语法树===>\\n\",astTree);\r\n    let childrenCode = generatorChildren(astTree.children);\r\n\r\n    const code = `_c(\"${astTree.tag}\",${astTree.attrs.length > 0 ? generatorProps(astTree.attrs): null}${astTree.children.length > 0 ? `,${childrenCode}`: \"\"})`\r\n\r\n\r\n    console.log(\"返回的是render函数字符串\",code);\r\n    return code;\r\n\r\n}\r\n\r\n\r\n/* \r\n    最终生成一个render函数，接收一个函数h当做参数\r\n    render(h){\r\n        return h(\"div\",{id:\"app\"},h('div',{style:{color:\"red\"}},_v(_s(name) + 'hello')));\r\n    }\r\n\r\n    h方法其实在源码里面就是_c,所以最终我们希望得到一个这样的render函数：\r\n    render(){\r\n        return _c(\"div\",{id:\"app\"},\r\n            _c('div',{style:{color:\"pink\"}},_v(_s(name) + 'hello')),\r\n            _c('span',null,_v(_s(age))),\r\n            _c('p',null,_v(_s(address.country)))\r\n        );\r\n    }\r\n\r\n    _c(\"div\",{id:\"app\"},_c(\"div\",{style:{\"color\":\"pink\",\"font-size\":\"18px\"}},_v(_s(name)+\"hello\")),_c(\"span\",null,_v(_s(age))),_c(\"p\",null,_v(_s(address.country))))\r\n\r\n    _c就是createElement(el,attrs,...children)\r\n        el是标签名称\r\n        attrs是属性对象\r\n        后面都是子节点\r\n\r\n    _v就是专门渲染表达式的\r\n    _s就是JSON.stringify 对表达式内的变量进行转义，避免出现对象和字符串相加变为[object Object]\r\n\r\n    要想得到类似这样的render函数，份两步走：\r\n    1. 先得到一个包含_c、_v和_s方法的字符串\r\n    2. with绑定vm实例，将表达式中的变量进行读取替换，比如将name替换为实例上的'lilei'\r\n    3. 通过new Function(fnString)的方式创建render函数\r\n\r\n    创建出来render函数这一步就ok了，就完成任务了，后面就是执行render函数返回vNode虚拟DOM了\r\n\r\n    所以我们codeGenerator的任务就是：\r\n    输入astTree这样一个JS对象\r\n    返回的产物是这样一个render函数字符串：其实就是字符串的拼接\r\n    render(){\r\n        return _c(\"div\",{id:\"app\"},\r\n            _c('div',{style:{color:\"pink\"}},_v(_s(name) + 'hello')),\r\n            _c('span',null,_v(_s(age))),\r\n            _c('p',null,_v(_s(address.country)))\r\n        );\r\n    }\r\n\r\n*/\r\n","import { parseHTML } from \"./htmlParser.js\";\r\nimport {codeGenerator} from './codeGenerator.js';\r\n\r\n\r\n/**\r\n * \r\n * @param {String} templateString 模板字符串\r\n * @return {Function} render函数\r\n */\r\nexport function compileToFunction(templateString){\r\n    console.log('原始模板字符串 =====>\\n',templateString);\r\n    \r\n    /* \r\n        1. 模板编译第一步：解析HTML模板字符串templateString为AST抽象语法树\r\n    */\r\n    const astTree = parseHTML(templateString);\r\n\r\n    /* \r\n        2. 模板编译第二步：将AST抽象语法树生成带有_c、_v、_s的字符串\r\n    */\r\n    const code = codeGenerator(astTree);\r\n\r\n\r\n    /* \r\n        3. 模板编译第三步：将字符串通过new Function生成render函数\r\n    */\r\n    const renderBody = `with(this){\r\n        return ${code};\r\n    }`\r\n    const render = new Function(renderBody);\r\n\r\n    return render;\r\n    \r\n}\r\n","import { initState } from \"./initState.js\";\r\nimport { compileToFunction } from \"../template-compiler/index.js\";\r\n\r\nexport function initMixin(Vue) {\r\n  /* 在这里给Vue原型拓展两个方法 */\r\n  Vue.prototype._init = function (options) {\r\n    // 给生成的实例上挂载$options用于在其他地方获取用户传入的配置\r\n    let vm = this;\r\n\r\n    // 将用户传入的options挂载到实例对象上 方便其他地方拿到\r\n    vm.$options = options;\r\n\r\n    // 开始初始化options中的各个状态 data - props - methods...\r\n    initState(vm);\r\n\r\n    if (options.el) {\r\n      vm.$mount(options.el);\r\n    }\r\n  };\r\n\r\n  Vue.prototype.$mount = function (elementSelector) {\r\n    let vm = this;\r\n    let options = vm.$options;\r\n    // 获取挂载的DOM元素节点\r\n    let element = document.querySelector(elementSelector);\r\n\r\n    /* \r\n\t\t\t编译模板优先级 render - template - el \r\n\t\t*/\r\n    if (!options.render) {\r\n      let templateString;\r\n\r\n      // 如果没有传递template属性但是有element\r\n      if (!options.template && element) {\r\n        templateString = element.outerHTML;\r\n      } else {\r\n        templateString = options.template;\r\n      }\r\n\r\n      // 确定template模板字符串，进行模板编译得到render函数\r\n      if (templateString) {\r\n        // 核心1：基于确定的模板字符串得到一个render函数\r\n        const render = compileToFunction(templateString);\r\n\t\t\r\n        // 核心2：将render函数挂载到options对象上\r\n        options.render = render;\r\n      }\r\n    }\r\n\r\n    // 模板挂载：将data对象中的值挂载到DOM元素上\r\n    // vm.$options中可以获取前面生成的render函数\r\n    // mountComponent(vm, element);\r\n  };\r\n}\r\n","/* 打包入口文件 */\r\nimport {\r\n\tinitMixin\r\n} from './init/init.js';\r\n\r\n\r\n\r\n// Vue构造函数\r\nfunction Vue(options) {\r\n\tthis._init(options);\r\n}\r\n\r\n\r\n// 给Vue类拓展初始化options的方法\r\ninitMixin(Vue);\r\n\r\n\r\n\r\n\r\nexport default Vue;\r\n"],"names":["observe","data","__ob__","Observer","Object","defineProperty","value","enumrable","configurable","Array","isArray","newArrayProto","createNewArrayProto","__proto__","observeArray","walk","keys","forEach","key","defineReactive","item","target","get","console","log","set","newValue","oldArrayProto","prototype","create","methods","method","args","result","call","inserted","slice","proxy","vm","initData","$options","_data","initState","options","props","initProps","computed","initComputed","watch","initWatch","ncname","qnameCapture","startTagOpen","RegExp","endTag","startTagClose","attribute","defaultTagReg","ELEMENT_TYPE","TEXT_TYPE","parseHTML","htmlStr","root","tagStack","currentParent","onParseStartTag","tagName","attrs","astNode","createASTElement","parent","children","push","onParseText","text","replace","nodeType","onParseEndTag","topNodeElement","pop","tag","error","length","advance","startIndex","parseStartTag","startTagOpenMatchResult","match","parseResult","attrMatchResult","startTagCloseMatchResult","name","textEndIndex","indexOf","startTagParseResult","endTagParseResult","generatorProps","propsStr","attr","styleObj","split","k","v","trim","JSON","stringify","generatorChildren","map","generatorChild","join","codeGenerator","content","test","tokens","defaultTagMatchRes","lastIndex","exec","matchStartIndex","index","token","astTree","childrenCode","code","compileToFunction","templateString","renderBody","render","Function","initMixin","Vue","_init","el","$mount","elementSelector","element","document","querySelector","template","outerHTML"],"mappings":"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"}