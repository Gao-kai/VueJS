/* 
    由于Vue2.0中的HTML模板解析是基于正则表达式来实现的，
    所以这个模块专门用来存放所有模板解析过程中遇到的正则表达式。
    从Vue3.0开始摒弃了正则表达式解析模板的方法，而是采用了字符逐个判断的方法来实现的。

    对于任意正则表达式，只有两个功能：
    1. 对一段字符串进行匹配校验，看这个字符串是否符合正则，返回的是布尔值
    2. 找出一段字符串中符合正则校验的内容，也就是正则捕获

    这里面的大多数正则就是为了捕获模板字符串中的开始标签、结束标签、标签属性以及双大括号内部的表达式的。

*/

/**
 * 1. ncname
 * ncname只是一个字符串，要将字符串转化为正则还需要使用new RegExp进行转换，字符串中的/必须用//表示
 *
 * 用于专门匹配标签名称的正则，注意不是标签全部而是标签名称
 * 比如标准标签：div,h1,p,span等
 * 还有自定义标签：table-el,cmdb-tree,hello.tree
 *
 * 1. 第一位必须以英文字母和下划线
 * 2. 开头后面可能有可能没有，比如b标签这种单字母标签
 * 3. 如果有那么可以是以数字、字母、下划线、中横线-和点.
 */
const ncname = `[a-zA-Z_][\\-\\.0-9a-zA-Z_]*`;

/**
 * 2. qnameCapture：捕获开始标签和结束标签名称
 *
 * qnameCapture是一个字符串，用在正则中便具有了可以捕获的作用，因为其内部有小括号
 * 专门用来从一串html字符串中捕获匹配到的标签名称分组内容的
 * 这里还考虑到了命名空间的标签比如：<div:hello>
 * 对于这样一个标签<div:hello></div:hello> 这个正则可以捕获到div:hello这个名称
 * 对于这样一个标签<div></div> 这个正则可以捕获到div这个标签名称
 */
const qnameCapture = `((?:${ncname}\\:)?${ncname})`;

/**
 * 3. startTagOpen：可以匹配到字符串中的开始标签如<div，目的是捕获到开始标签名称div
 *
 * 比如字符串<div></div> 会匹配到<div,分组会捕获到字符串div,这个div就是组成AST抽象语法树的tag属性。
 *
 * 解析正则：
 * 1. 标签必须以<开头
 * 2. 标签名称不可以以数字开头，必须以数字字母瞎下划线开头
 * 3. 标签名称除了首字母之外，还可以是数字、字母、下划线、中横线-和点.
 *    比如自定义标签<_div> <table-el> <div.demo>
 * 4. HTML标签有两种，常见的比如<div>，还有不常见的带有命名空间的标签比如：<div:hello>
 *    在web component中定义的自定义标签会出现这种情况
 *
 */
const startTagOpen = new RegExp(`^<${qnameCapture}`);

/**
 * 4. endTag: 专门用来匹配html结束标签的正则，在匹配成功会捕获到结束标签的名称
 * 和开始标签一样，对于</div>这种普通标签，会匹配到</div>，捕获到div
 * 对于<br/>和<hr/>这种自己闭合的标签，会匹配为空，因为会被当做开始标签解析
 */
const endTag = new RegExp(`^<\\/${qnameCapture}[^>]*>`);

/**
 * 5. startTagClose： 专门用来匹配开始标签闭合的正则
 * 比如可以匹配成功 结束标签<div>，会匹配到>符号
 * 比如可以匹配成功 自闭合标签<br/>，会匹配到/>符号
 *
 *
 * \s* 可以有0个或多个空白字符开头
 * (\/?)>  匹配 />
 */
const startTagClose = /^\s*(\/?)>/;

/**
 * 6. attribute：专门用来匹配和捕获标签内的属性键值对的正则
 *     由于此正则存在多个分组，但是最终我们需要的是：
 * 第一个分组$1，存放的是属性的key
 * 第三、四、五分组，分别存放的是属性的值
 *
 * 1. ^\s* 可以以空白字符开始
 *
 * 2. ([^\s"'<>\/=]+) 后续不能存在这些特殊字符 可以是除了这些字符的一个或多个字符组成的属性key
 *
 * 3. (?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?
 *      ?: 整体分组是只匹配不捕获的
 *      ?  整体可以出现一次或多次
 *
 *  3.1  \s*(=)\s* 键值对以=号连接，前面左右两边可以有空白字符，比如: name =   job
 *  3.2  () ?:整体分组是只匹配不捕获的
 *      "([^"]*)"+ 左右边都是双引号，中间不是双引号的就可以匹配，比如color="red"
 *      |代表或者的意思
 *      '([^']*)'+ 左右边都是单引号，中间不是单引号的就可以匹配，比如fontSize='18px'
 *      |代表或者的意思
 *      ([^\s"'=<>`]+) 只要不是空白字符 " ' = < > `，其余的任意字符组成的一个或多个单词都可以匹配，比如data-src=demo
 *  3.3 还可以只有属性名没有属性值，比如<input disabled>这种也符合html语法
 */
const attribute =
  /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;

/**
 * 7. defaultTagReg ： 用来匹配双大括号语法的正则，可以捕获到内部的表达式，全局匹配
 *
 * ((?:.|\r?\n)+?)
 * 最后的?更在量词元字符后面，代表取消正则捕获的贪婪性，只捕获最短的符合条件的字符即可
 * (?:.|\r?\n)+
 * 开头的?:表示对该小分组只匹配不捕获
 * .表示除了\n换行符之外的任意字符
 * 或者
 * \r?\n 0个或一个回车符号后面跟这个换行符
 *
 * {{any char}} 表示可以匹配任意双大括号语法，并且会捕获到里面的表达式
 *
 */
const defaultTagReg = /\{\{((?:.|\r?\n)+?)\}\}/g;


export {
    startTagOpen,
    startTagClose,
    endTag,
    attribute,
    defaultTagReg
}